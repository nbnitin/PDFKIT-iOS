//
//  PDFViewController.swift
//
//  Copyright © 2020 Nitin. All rights reserved.
//

import UIKit
import PDFKit

class PDFViewController: UIViewController {

    @IBOutlet weak var pdfViewContainer: UIView!
    
    var pdfView : PDFView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        pdfView = PDFView(frame: CGRect(x:0,y:0,width: pdfViewContainer.frame.width,height: pdfViewContainer.frame.height))
        pdfViewContainer.addSubview(pdfView)
        NetworkManager.shared.downloadContentGet(fromUrlString: "http://www.africau.edu/images/default/sample.pdf", completionHandler: {(result) in
            switch result {
            case .success(let data):
                DispatchQueue.main.async {
                    self.pdfView.document = PDFDocument(data: data)
                }
                break
            case .failure(let err):
                break
            }
        })
    }
    

    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destination.
        // Pass the selected object to the new view controller.
    }
    */

    @IBAction func btnBack(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
}

//
//  NetworkManager.swift
//
//  Copyright © 2020 Nitin. All rights reserved.
//

//Note: post request cannot be cached only get request can, cached depends on unique url. sot that why we are making here unique url with appending bach id

import Foundation
import Network

class NetworkManager {
    
    static let shared = NetworkManager()
    
    var batchId = ""
    var lat : Double = 0
    var lng : Double = 0
    
    private let allowedDiskSize = 100 * 1024 * 1024
    private lazy var cache: URLCache = {
        return URLCache(memoryCapacity:0, diskCapacity: allowedDiskSize, diskPath: "gifCache")
    }()
    
    typealias DownloadCompletionHandler = (Result<Data,Error>) -> ()
    
    
    init(){
        //create initial userdefault
        guard let _ = UserDefaults.standard.value(forKey: "CustomUrls") as? [[String:Date]] else {
            let x = [[String:Date]]()
            UserDefaults.standard.set(x, forKey: "CustomUrls")
            return
        }
        //calls for removeAllCachedResponse
        self.removeAllCachedResponse()
        
    }
    //
    
    //Mark:- create url session
    private func createAndRetrieveURLSession() -> URLSession {
        let sessionConfiguration = URLSessionConfiguration.default
        sessionConfiguration.requestCachePolicy = .returnCacheDataElseLoad
        sessionConfiguration.urlCache = cache
        return URLSession(configuration: sessionConfiguration)
    }
    
    //Mark:- handle post requets
    public func downloadContent(fromUrlString: String, completionHandler: @escaping DownloadCompletionHandler) {
        
        guard let downloadUrl = URL(string: fromUrlString) else { return }
        var urlRequest = URLRequest(url: downloadUrl)
        
        let cachedUrl = URLRequest(url:URL(string:fromUrlString + batchId)!)
        
        urlRequest.addValue("DB7B3774-983B-4F0F-8589-CABCDB818B79", forHTTPHeaderField: "APIKEY")
        urlRequest.addValue("application/json", forHTTPHeaderField: "Content-Type")
        urlRequest.addValue("application/json", forHTTPHeaderField: "Accept")
        urlRequest.httpMethod = "POST"
        
        let parameters: [String: Any] = [
            "batchCode" : batchId,
            "lat" : "0",
            "lng" : "0"
        ]
        
        do {
            urlRequest.httpBody = try JSONSerialization.data(withJSONObject: parameters, options: .prettyPrinted) // pass dictionary to nsdata object and set it as request body
        } catch let error {
            print(error.localizedDescription)
        }
        
        // First try to fetching cached data if exist
        if let cachedData = self.cache.cachedResponse(for: cachedUrl) {
            print("Cached data in bytes:", cachedData.data)
            completionHandler(.success(cachedData.data))
        } else {
            // No cached data, download content than cache the data
            createAndRetrieveURLSession().dataTask(with: urlRequest) { (data, response, error) in
                
                if let error = error {
                    completionHandler(.failure(error))
                } else {
                    do {
                        //create json object from data
                        if let json = try JSONSerialization.jsonObject(with: data!, options: .mutableContainers) as? [String: Any] {
                            print(json)
                            if let err = json["HasError"] as? Int {
                                if ( err == 0 ) {
                                    self.storeCachedResponse(data: data!,url:cachedUrl,response:response!)
                                    completionHandler(.success(data!))
                                } else {
                                    //has error
                                }
                            }
                        }
                    } catch let error {
                        print(error.localizedDescription)
                    }
                    
                }
            }.resume()
        }
    }
    
    
    //Mark:- handle get requets
    public func downloadContentGet(fromUrlString: String, completionHandler: @escaping DownloadCompletionHandler) {
        
        guard let downloadUrl = URL(string: fromUrlString) else { return }
        var urlRequest = URLRequest(url: downloadUrl)
        
        let cachedUrl = URLRequest(url:URL(string:fromUrlString + batchId)!)
        
        urlRequest.addValue("DB7B3774-983B-4F0F-8589-CABCDB818B79", forHTTPHeaderField: "APIKEY")
        
        urlRequest.httpMethod = "GET"
        
        if let cachedData = self.cache.cachedResponse(for: cachedUrl) {
            print("Cached data in bytes:", cachedData.data)
            completionHandler(.success(cachedData.data))
            
        } else {
            // No cached data, download content than cache the data
            createAndRetrieveURLSession().dataTask(with: urlRequest) { (data, response, error) in
                
                if let error = error {
                    completionHandler(.failure(error))
                } else {
                    self.storeCachedResponse(data: data!,url:cachedUrl,response:response!)
                    completionHandler(.success(data!))
                }
            }.resume()
        }
    }
    
    //Mark:- store cached response, and records for url status and date into user default
    private func storeCachedResponse(data:Data, url:URLRequest, response: URLResponse) {
        let cachedData = CachedURLResponse(response: response, data: data)
        self.cache.storeCachedResponse(cachedData, for: url)
        
        var x = UserDefaults.standard.value(forKey: "CustomUrls") as! [[String:Date]]
        let newData = [url.url!.absoluteString:Date()]
        x.append(newData)
        UserDefaults.standard.set(x, forKey: "CustomUrls")
        
    }
    
    //Mark:- remove all cached response older than 7 days
    private func removeAllCachedResponse(){
        guard let datas = UserDefaults.standard.value(forKey: "CustomUrls") as? [[String:Date]] else {
            return
        }
        
        let calendar: NSCalendar = NSCalendar.current as NSCalendar
        // Replace the hour (time) of both dates with 00:00
        let date1 = calendar.startOfDay(for: Date())
        let flags = NSCalendar.Unit.day
        
        for item in datas {
            let key = item.first?.key
            let value = item[item.first!.key]
            
            if let date2 = value as? Date {
                let dateNew = calendar.startOfDay(for: date2)
                let components = calendar.components(flags, from: date1, to: dateNew, options: .init())
                
                if ( components.day! >= 7  ) {
                    let urlRequest = URLRequest(url: URL(string:key!)!)
                    cache.removeCachedResponse(for: urlRequest)
                }
            }
        }
    }
    
}

